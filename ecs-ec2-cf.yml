AWSTemplateFormatVersion: '2010-09-09'
Description: ECS Cluster in EC2.
Parameters:
  EnvironmentName:
    Type: String
    Default: NodeWSAppBanner
    Description: "Nombre utilizado para el namespace"
  Instancetype:
    Description: EC2 instance type
    Type: String
    Default: t2.small
    Description : tipos de instancias a utilizar por el contenedor
    AllowedValues: [ t2.micro, t2.small, t2.medium, t2.large, t2.xlarge, t2.2xlarge,
      m5.large, m5.xlarge, m5.2large, m5.4xlarge, m5.12xlarge, m5.24large,
      c5.large, c5.xlarge, c5.2xlarge, c5.4xlarge, c5.9xlarge, c5.18xlarge,
      r5.large, r5.xlarge, r5.2xlarge, r5.4xlarge, r5.12xlarge, r5.24xlarge ]
   ConstraintDescription: Seleccione un tipo de instancia valida.
  DesiredCapacity:
    Type: Number
    Default: '1'
    Description: Numero de instancias EC2 para lanzar en el cluster
  MaxSize:
    Type: Number
    Default: '6'
    Description: maximo numero de instancias permitidas
  ECSAMI:
    Description: AMI ID
    Type: AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>
    Default: aws/service/ecs/optimized-ami/amazon-linux-2/recommended/image_id
    Description: ami utilizada para el cluster

Resources:

# ECS

# Security group para la instancia EC2 que contendra los contenedores
# Reglas para el ingreso de trafico
  ECSCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: 'enhanced-architecture-fargate'
  ECSContainerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Acceso al ECS host que ejecurara los contenedores
      VpcId:
        Fn::ImportValue: !Sub ${EnvironmentName}:VpcId
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: 22
        ToPort: 22
        CidrIp: 0.0.0.0/0


# Autoscaling group. This launches the actual EC2 instances that will register
  # themselves as members of the cluster, and run the docker containers.
  ECSAutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      VPCZoneIdentifier:
        - Fn::ImportValue: !Sub ${EnvironmentName}:PublicSubnetOne
        - Fn::ImportValue: !Sub ${EnvironmentName}:PublicSubnetTwo
      LaunchConfigurationName: !Ref 'ContainerInstances'
      MinSize: '1'
      MaxSize: !Ref 'MaxSize'
      DesiredCapacity: !Ref 'DesiredCapacity'
    CreationPolicy:
      ResourceSignal:
        Timeout: PT15M
    UpdatePolicy:
      AutoScalingReplacingUpdate:
        WillReplace: 'true'
  ContainerInstances:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      ImageId: !Ref 'ECSAMI'
      SecurityGroups: [!Ref 'ContainerSecurityGroup']
      InstanceType: !Ref 'InstanceType'
      IamInstanceProfile: !Ref 'EC2InstanceProfile'
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -xe
          echo ECS_CLUSTER=${ECSCluster} >> /etc/ecs/ecs.config
          yum install -y aws-cfn-bootstrap
          /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource ECSAutoScalingGroup --region ${AWS::Region}
  EC2InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles: [ 'ecsInstanceRole' ]


Outputs:
  ClusterName:
    Description: The name of the ECS cluster
    Value: !Ref 'ECSCluster'
    Export:
      Name: !Sub ${EnvironmentName}:ClusterName
   
    









